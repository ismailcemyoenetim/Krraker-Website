<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Retro Terminal Chat</title>
    <style>
        @font-face {
            font-family: 'PxPlus IBM VGA8';
            src: url('https://cdn.jsdelivr.net/npm/ibm-plex-mono@4.0.2/IBM-PlexMono-Regular.woff2') format('woff2');
            font-weight: normal;
            font-style: normal;
        }

        :root {
            --terminal-amber: #ff9c00;
            --terminal-amber-dim: #994c00;
            --terminal-bg: #000000;
            --text-shadow: 0 0 5px rgba(255, 156, 0, 0.7);
        }

        body, html {
            margin: 0;
            padding: 0;
            background-color: var(--terminal-bg);
            color: var(--terminal-amber);
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            height: 100vh;
            overflow: hidden;
            text-shadow: var(--text-shadow);
            font-size: 14px;
            line-height: 1.2;
        }

        .terminal-container {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            padding: 0;
            position: relative;
            overflow: hidden;
            border: 0px solid #333;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.8);
            border-radius: 8px;
        }

        .terminal-header {
            border-bottom: 1px solid var(--terminal-amber-dim);
            padding-bottom: 5px;
            margin-bottom: 10px;
        }

        .system-info {
            margin-bottom: 10px;
        }

        .process-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 15px;
        }

        .process-table-header {
            display: flex;
            background-color: var(--terminal-amber);
            color: var(--terminal-bg);
            padding: 2px 0;
            margin-bottom: 5px;
        }

        .process-table-header span {
            display: inline-block;
            text-align: left;
            font-weight: bold;
        }

        .process-table pre {
            margin: 0;
            padding: 0;
            font-family: inherit;
            white-space: pre;
            overflow-x: hidden;
        }

        .process-row span {
            display: inline-block;
            text-align: left;
        }

        .chat-messages {
            margin-bottom: 30px;
            max-height: calc(100vh - 200px);
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--terminal-amber-dim) var(--terminal-bg);
        }

        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: var(--terminal-bg);
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background-color: var(--terminal-amber-dim);
        }

        .message {
            margin-bottom: 5px;
            word-wrap: break-word;
        }

        .message-user {
            color: #3f3;
        }

        .message-system {
            color: #f33;
        }

        .back-button {
            position: absolute;
            top: 4px;
            right: 4px;
            background: transparent;
            border: 1px solid var(--terminal-amber);
            color: var(--terminal-amber);
            padding: 2px 4px;
            font-family: inherit;
            cursor: pointer;
            text-shadow: var(--text-shadow);
            font-size: 12px;
            z-index: 999;
            border-radius: 3px;
        }

        .back-button:hover {
            background-color: var(--terminal-amber-dim);
        }

        .crt-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: repeating-linear-gradient(
                0deg,
                rgba(0, 0, 0, 0.15),
                rgba(0, 0, 0, 0.15) 1px,
                transparent 1px,
                transparent 2px
            );
            pointer-events: none;
            z-index: 998;
        }

        /* Terminal cursor style */
        .cursor {
            display: inline-block;
            width: 8px;
            height: 14px;
            background-color: var(--terminal-amber);
            animation: blink 1s step-end infinite;
            margin-left: 2px;
            vertical-align: middle;
        }

        /* Underscore cursor style */
        .underscore-cursor {
            display: inline-block;
            width: 8px;
            height: 2px;
            background-color: var(--terminal-amber);
            animation: blink 1s step-end infinite;
            margin-left: 0;
            vertical-align: middle;
            position: relative;
            top: 6px;
        }

        /* Terminal input area */
        .terminal-input {
            position: absolute;
            bottom: 4px;
            left: 0;
            width: 100%;
            padding: 0 4px;
            box-sizing: border-box;
            white-space: pre-wrap;
            word-break: break-all;
            line-height: 1.2;
        }

        .input-line {
            position: relative;
            display: flex;
        }

        .prompt {
            color: var(--terminal-amber);
        }

        .input-content {
            color: var(--terminal-amber);
            outline: none;
            min-width: 1px;
            white-space: pre;
        }

        /* Boot screen */
        .boot-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--terminal-bg);
            z-index: 1000;
            padding: 4px;
            box-sizing: border-box;
            overflow: auto;
            color: var(--terminal-amber);
            font-family: inherit;
            border-radius: 6px;
        }

        .boot-line {
            margin: 0;
            padding: 0;
            line-height: 1.2;
            animation: fadeIn 0.1s ease-in-out;
        }
        
        /* Menu screen */
        .menu-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--terminal-bg);
            z-index: 999;
            padding: 4px;
            box-sizing: border-box;
            color: var(--terminal-amber);
            font-family: inherit;
            display: none;
            border-radius: 6px;
        }
        
        .menu-title {
            margin-bottom: 8px;
            font-weight: bold;
            text-shadow: var(--text-shadow);
        }
        
        .menu-items {
            list-style-type: none;
            padding: 0;
            margin: 16px 0;
        }
        
        .menu-item {
            padding: 4px 8px;
            margin-bottom: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            white-space: nowrap;
            border-radius: 4px;
        }
        
        .menu-item:hover, .menu-item.active {
            background-color: var(--terminal-amber);
            color: var(--terminal-bg);
            text-shadow: none;
            box-shadow: 0 0 10px var(--terminal-amber-dim);
        }
        
        .menu-item .command {
            display: inline-block;
            min-width: 150px;
            font-weight: bold;
            margin-right: 15px;
            position: relative;
        }
        
        .menu-item .command::after {
            content: " ‚èê ";
            position: absolute;
            right: -15px;
            color: var(--terminal-amber);
        }
        
        .menu-item .description {
            display: inline-block;
            color: var(--terminal-amber);
            font-weight: bold;
            text-shadow: var(--text-shadow);
            margin-left: 15px;
        }
        
        .menu-item:hover .description, .menu-item.active .description {
            color: rgba(0, 0, 0, 0.9);
            text-shadow: none;
        }

        /* Hide the main terminal initially */
        .main-terminal {
            display: none;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        /* Loading screen */
        .loading-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--terminal-bg);
            z-index: 1001;
            padding: 4px;
            box-sizing: border-box;
            overflow: auto;
            color: var(--terminal-amber);
            font-family: inherit;
            display: none;
            border-radius: 6px;
        }

        .loading-line {
            margin: 0;
            padding: 0;
            line-height: 1.2;
            animation: fadeIn 0.1s ease-in-out;
        }

        /* IRC-style chat with CRT aesthetic */
        .irc-container {
            position: absolute;
            top: 5%;
            left: 5%;
            width: 90%;
            height: 90%;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            box-shadow: 0 0 10px var(--terminal-amber-dim), inset 0 0 5px var(--terminal-amber-dim);
            display: none;
            z-index: 1000;
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            font-size: 14px;
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            overflow: hidden;
            border-radius: 8px;
        }

        .irc-container .crt-overlay {
            background: repeating-linear-gradient(
                0deg,
                rgba(0, 0, 0, 0.15),
                rgba(0, 0, 0, 0.15) 1px,
                transparent 1px,
                transparent 2px
            );
            opacity: 0.3;
            z-index: 900; /* Ensure it doesn't cover interactive elements */
        }

        .irc-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(
                ellipse at center,
                transparent 0%,
                rgba(0, 0, 0, 0.3) 90%,
                rgba(0, 0, 0, 0.5) 100%
            );
            pointer-events: none;
            z-index: 999;
        }

        @keyframes flicker {
            0% { opacity: 0.97; }
            5% { opacity: 0.95; }
            10% { opacity: 0.97; }
            15% { opacity: 0.95; }
            20% { opacity: 0.97; }
            25% { opacity: 0.95; }
            30% { opacity: 0.97; }
            35% { opacity: 0.95; }
            40% { opacity: 1; }
            100% { opacity: 1; }
        }

        .irc-title-bar {
            height: 22px;
            background-color: var(--terminal-bg);
            border-bottom: 1px solid var(--terminal-amber);
            display: flex;
            align-items: center;
            padding: 0 5px;
            color: var(--terminal-amber);
            font-weight: bold;
            border-radius: 6px 6px 0 0;
        }

        .irc-title-text {
            flex-grow: 1;
            font-weight: bold;
            animation: flicker 5s infinite;
        }

        .irc-title-buttons {
            display: flex;
        }

        .irc-button {
            width: 16px;
            height: 14px;
            margin-left: 5px;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: var(--terminal-amber);
            cursor: pointer;
            text-shadow: var(--text-shadow);
            border-radius: 3px;
        }

        .irc-button:hover {
            background-color: var(--terminal-amber);
            color: var(--terminal-bg);
            text-shadow: none;
        }

        .irc-minimize::after {
            content: "_";
            position: relative;
            top: -4px;
        }

        .irc-maximize::after {
            content: "‚ñ°";
        }

        .irc-close::after {
            content: "√ó";
        }

        .irc-tabs {
            height: 24px;
            background-color: var(--terminal-bg);
            display: flex;
            border-bottom: 1px solid var(--terminal-amber);
        }

        .irc-tab {
            padding: 3px 10px;
            border: 1px solid var(--terminal-amber);
            border-bottom: none;
            margin-right: 2px;
            cursor: pointer;
            background-color: var(--terminal-bg);
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            border-radius: 4px 4px 0 0;
        }

        .irc-tab.active {
            background-color: var(--terminal-amber-dim);
            color: var(--terminal-amber);
            text-shadow: 0 0 8px var(--terminal-amber);
            position: relative;
            z-index: 1;
        }

        .irc-content {
            display: flex;
            height: calc(100% - 24px); /* Adjusted height since we removed tabs from top */
        }

        .irc-chat {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            border-right: 1px solid var(--terminal-amber);
        }

        .irc-chat-window {
            flex-grow: 1;
            background-color: var(--terminal-bg);
            overflow-y: auto;
            padding: 5px;
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            white-space: pre-wrap;
            scrollbar-width: thin;
            scrollbar-color: var(--terminal-amber-dim) var(--terminal-bg);
        }

        .irc-chat-window::-webkit-scrollbar {
            width: 12px;
            border-radius: 6px;
        }

        .irc-chat-window::-webkit-scrollbar-track {
            background: var(--terminal-bg);
        }

        .irc-chat-window::-webkit-scrollbar-thumb {
            background-color: var(--terminal-amber-dim);
            border: 2px solid var(--terminal-bg);
            border-radius: 6px;
        }

        .irc-chat-window::-webkit-scrollbar-button {
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            height: 12px;
            border-radius: 3px;
        }

        .irc-chat-window::-webkit-scrollbar-button:vertical:start:decrement {
            background-image: linear-gradient(135deg, transparent 4px, var(--terminal-amber) 4px, var(--terminal-amber) 6px, transparent 6px),
                              linear-gradient(45deg, transparent 4px, var(--terminal-amber) 4px, var(--terminal-amber) 6px, transparent 6px);
            background-size: 8px 4px;
            background-position: center center;
            background-repeat: no-repeat;
        }

        .irc-chat-window::-webkit-scrollbar-button:vertical:end:increment {
            background-image: linear-gradient(315deg, transparent 4px, var(--terminal-amber) 4px, var(--terminal-amber) 6px, transparent 6px),
                              linear-gradient(225deg, transparent 4px, var(--terminal-amber) 4px, var(--terminal-amber) 6px, transparent 6px);
            background-size: 8px 4px;
            background-position: center center;
            background-repeat: no-repeat;
        }

        .irc-input {
            height: 24px;
            border-top: 1px solid var(--terminal-amber);
            display: flex;
            align-items: center;
            padding: 0 5px;
            position: relative;
        }

        .irc-input-prompt {
            color: var(--terminal-amber);
            margin-right: 5px;
            text-shadow: var(--text-shadow);
        }

        .irc-input input {
            flex-grow: 1;
            height: 18px;
            border: none;
            background-color: var(--terminal-bg);
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            font-size: 14px;
            padding: 1px 0;
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            outline: none;
            border-radius: 4px;
        }

        .irc-input .underscore-cursor {
            display: inline-block;
            width: 8px;
            height: 2px;
            background-color: var(--terminal-amber);
            animation: blink 1s step-end infinite;
            margin-left: 0;
            vertical-align: middle;
            position: absolute;
            right: 10px;
            bottom: 7px;
        }

        .irc-userlist {
            width: 150px;
            background-color: var(--terminal-bg);
            overflow-y: auto;
            font-size: 12px;
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            border-right: 1px solid var(--terminal-amber);
        }

        .irc-userlist-header {
            padding: 3px 5px;
            background-color: var(--terminal-bg);
            border-bottom: 1px solid var(--terminal-amber);
            font-weight: bold;
        }

        .irc-users {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .irc-user {
            padding: 2px 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            border-radius: 3px;
        }

        .irc-user:hover {
            background-color: var(--terminal-amber-dim);
        }

        .irc-user::before {
            content: "";
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #00FF00;
            margin-right: 7px;
        }

        .irc-user.away::before {
            background-color: #FFA500;
        }

        .irc-user.offline::before {
            background-color: #FF0000;
        }

        /* Navbar at the top */
        .irc-navbar {
            display: flex;
            height: 20px;
            background-color: var(--terminal-bg);
            border-bottom: 1px solid var(--terminal-amber);
            color: var(--terminal-amber);
            font-size: 12px;
            z-index: 1001; /* Ensure it appears above other elements */
            position: relative; /* Ensure proper stacking context */
        }

        .irc-navbar-item {
            padding: 2px 10px;
            cursor: pointer;
            border-right: 1px solid var(--terminal-amber-dim);
            position: relative;
            border-radius: 2px;
        }

        .irc-navbar-item:hover {
            background-color: var(--terminal-amber-dim);
        }

        /* Room management */
        .irc-add-room {
            padding: 4px 8px;
            cursor: pointer;
            margin-top: 4px;
            background-color: var(--terminal-bg);
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            border-radius: 3px;
            list-style: none;
        }
        
        .irc-add-room:hover {
            background-color: var(--terminal-amber-dim);
        }

        /* Whisper/private message styling */
        .irc-whisper {
            color: #FF69B4;
            text-shadow: none;
        }

        .irc-message {
            line-height: 1.2;
            margin-bottom: 1px;
            word-wrap: break-word;
        }

        .irc-timestamp {
            color: var(--terminal-amber-dim);
            margin-right: 5px;
        }

        .irc-nick {
            font-weight: bold;
            margin-right: 5px;
            text-shadow: none;
        }

        .irc-text {
            color: #FFFFFF; /* Change from amber to white for better contrast */
        }

        .irc-system {
            color: #999999;
            text-shadow: none;
        }

        .irc-action {
            color: #999999;
            text-shadow: none;
        }

        .irc-highlight {
            background-color: var(--terminal-amber-dim);
            color: #000000;
            text-shadow: none;
        }

        .blink {
            animation: blinking 1s infinite;
        }

        @keyframes blinking {
            0%, 49% {
                opacity: 1;
            }
            50%, 100% {
                opacity: 0;
            }
        }

        /* Navbar dropdown menus */
        .dropdown-menu {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            min-width: 160px;
            z-index: 1001;
            box-shadow: 0 0 5px rgba(255, 156, 0, 0.5);
            border-radius: 5px;
        }

        .irc-navbar-item:hover .dropdown-menu {
            display: block;
        }

        .dropdown-item {
            padding: 6px 10px;
            cursor: pointer;
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            border-radius: 3px;
        }

        .dropdown-item:hover {
            background-color: var(--terminal-amber-dim);
        }

        .dropdown-divider {
            height: 1px;
            background-color: var(--terminal-amber-dim);
            margin: 2px 0;
        }

        /* Nickname selection dialog */
        .nickname-dialog {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 350px;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            padding: 20px;
            z-index: 1002;
            box-shadow: 0 0 15px var(--terminal-amber-dim);
            display: none;
            border-radius: 8px;
        }

        .nickname-dialog h2 {
            color: var(--terminal-amber);
            margin-top: 0;
            font-size: 18px;
            text-align: center;
            margin-bottom: 15px;
        }

        .nickname-form {
            display: flex;
            flex-direction: column;
        }

        .nickname-field {
            display: flex;
            margin-bottom: 15px;
        }

        .nickname-field label {
            color: var(--terminal-amber);
            margin-right: 10px;
            min-width: 80px;
        }

        .nickname-field input {
            flex: 1;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            color: var(--terminal-amber);
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            padding: 5px;
            font-size: 14px;
            border-radius: 4px;
        }

        .nickname-form button {
            align-self: center;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            color: var(--terminal-amber);
            padding: 5px 15px;
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            cursor: pointer;
            text-shadow: var(--text-shadow);
            margin-top: 10px;
            border-radius: 4px;
        }

        .nickname-form button:hover {
            background-color: var(--terminal-amber-dim);
        }

        /* Add Room Dialog */
        .add-room-dialog {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 400px;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            padding: 20px;
            z-index: 1003;
            box-shadow: 0 0 15px var(--terminal-amber-dim);
            display: none;
            border-radius: 8px;
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
        }

        .add-room-dialog h2 {
            color: var(--terminal-amber);
            margin-top: 0;
            font-size: 18px;
            margin-bottom: 15px;
            text-align: center;
        }

        .add-room-dialog input {
            width: 100%;
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            color: var(--terminal-amber);
            font-family: inherit;
            padding: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            box-sizing: border-box;
            border-radius: 4px;
        }

        .add-room-dialog .buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .add-room-dialog button {
            background-color: var(--terminal-bg);
            border: 1px solid var(--terminal-amber);
            color: var(--terminal-amber);
            padding: 5px 15px;
            font-family: inherit;
            cursor: pointer;
            text-shadow: var(--text-shadow);
            border-radius: 4px;
        }

        .add-room-dialog button:hover {
            background-color: var(--terminal-amber-dim);
        }

        .add-room-dialog .dialog-divider {
            height: 1px;
            background-color: var(--terminal-amber-dim);
            margin: 15px 0;
        }

        /* Admin Panel Styles */
        .admin-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            overflow: hidden;
        }

        /* CRT effect for admin panel */
        .admin-crt-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.25) 50%),
                linear-gradient(90deg, rgba(255, 0, 0, 0.06), rgba(0, 255, 0, 0.02), rgba(0, 0, 255, 0.06));
            background-size: 100% 2px, 3px 100%;
            pointer-events: none;
            z-index: 2003;
        }

        .admin-crt-effect::before {
            content: "";
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            background: rgba(18, 16, 16, 0.1);
            opacity: 0.15;
            z-index: 2003;
        }

        .matrix-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2001;
            overflow: hidden;
        }

        .matrix-char {
            position: absolute;
            color: var(--terminal-amber);
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1;
            text-shadow: var(--text-shadow);
            user-select: none;
        }

        .admin-access-panel {
            position: relative;
            z-index: 2002;
            background-color: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 156, 0, 0.4);
            border-radius: 5px;
            padding: 20px;
            width: 300px;
            text-align: center;
            box-shadow: 0 0 20px rgba(255, 156, 0, 0.3);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
        }

        .admin-access-panel h2 {
            color: var(--terminal-amber);
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.5rem;
            letter-spacing: 2px;
            text-shadow: var(--text-shadow);
        }

        .admin-login-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .admin-field {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }

        .admin-field label {
            color: var(--terminal-amber);
            font-size: 0.8rem;
            letter-spacing: 1px;
            text-align: left;
        }

        .admin-field input {
            width: 100%;
            padding: 8px;
            background-color: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 156, 0, 0.4);
            color: var(--terminal-amber);
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            outline: none;
            box-sizing: border-box;
        }

        .admin-field input:focus {
            border-color: var(--terminal-amber);
            box-shadow: 0 0 5px rgba(255, 156, 0, 0.5);
        }

        .admin-login-form button {
            margin-top: 10px;
            padding: 8px 15px;
            background-color: rgba(255, 156, 0, 0.2);
            border: 1px solid rgba(255, 156, 0, 0.4);
            color: var(--terminal-amber);
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .admin-login-form button:hover {
            background-color: rgba(255, 156, 0, 0.3);
            border-color: var(--terminal-amber);
        }

        .admin-message {
            margin-top: 15px;
            color: var(--terminal-amber);
            font-size: 0.9rem;
            min-height: 20px;
        }

        .irc-roomlist {
            width: 150px;
            background-color: var(--terminal-bg);
            overflow-y: auto;
            font-size: 12px;
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            border-right: 1px solid var(--terminal-amber);
        }
        
        .irc-roomlist-header {
            padding: 3px 5px;
            background-color: var(--terminal-bg);
            border-bottom: 1px solid var(--terminal-amber);
            font-weight: bold;
        }
        
        .irc-rooms {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .irc-room {
            padding: 4px 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            border-radius: 3px;
        }
        
        .irc-room:hover {
            background-color: var(--terminal-amber-dim);
        }
        
        .irc-room.active {
            background-color: var(--terminal-amber-dim);
            color: var(--terminal-amber);
            text-shadow: 0 0 8px var(--terminal-amber);
        }
        
        .irc-add-room {
            padding: 4px 8px;
            cursor: pointer;
            margin-top: 4px;
            background-color: var(--terminal-bg);
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
            border-radius: 3px;
            list-style: none;
        }
        
        .irc-add-room:hover {
            background-color: var(--terminal-amber-dim);
        }

        .irc-content {
            display: flex;
            height: calc(100% - 24px); /* Adjusted height since we removed tabs from top */
        }

        .irc-roomlist-header, .irc-userlist-header, .irc-title-text {
            font-family: 'PxPlus IBM VGA8', 'Courier New', monospace;
            font-weight: bold;
            font-size: 14px;
            color: var(--terminal-amber);
            text-shadow: var(--text-shadow);
        }
        
        /* User profile section */
        .irc-user-profile {
            padding: 10px;
            border-top: 1px solid var(--terminal-amber-dim);
            margin-top: 10px;
            font-size: 12px;
        }
        
        .irc-user-profile .user-nick {
            font-weight: bold;
            margin-bottom: 5px;
            text-align: center;
        }
        
        .irc-user-profile .user-status {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .irc-user-profile .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #00FF00;
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <div class="terminal-container">
        <!-- Boot screen -->
        <div id="bootScreen" class="boot-screen">
            <div class="crt-overlay"></div>
        </div>
        
        <!-- Menu screen -->
        <div id="menuScreen" class="menu-screen">
            <div class="crt-overlay"></div>
            <div class="menu-title">Welcome to KrakerOS v0.777</div>
            <div>Select a protocol to continue:</div>
            <div>--------------------------------</div>
            
            <ul class="menu-items" id="menuItems">
                <li class="menu-item" data-action="chat">
                    <span class="command">chat --chat</span>
                    <span class="description">Establish secure communications channel</span>
                </li>
                <li class="menu-item" data-action="projects">
                    <span class="command">init --projects</span>
                    <span class="description">Load design archives and visual experiments</span>
                </li>
                <li class="menu-item" data-action="shop">
                    <span class="command">launch --shop</span>
                    <span class="description">Access the secured marketplace interface</span>
                </li>
                <li class="menu-item" data-action="login">
                    <span class="command">Login --login</span>
                    <span class="description">Authenticate user access to system resources</span>
                </li>
                <li class="menu-item" data-action="register">
                    <span class="command">Register --register</span>
                    <span class="description">Create new user credentials for system access</span>
                </li>
                <li class="menu-item" data-action="canvas">
                    <span class="command">run --canvas</span>
                    <span class="description">Initialize experimental drawing environment</span>
                </li>
                <li class="menu-item" data-action="admin">
                    <span class="command">admin --access</span>
                    <span class="description">Access restricted system administration panel</span>
                </li>
            </ul>
            
            <div class="prompt">user@minerva:~$ <span id="menuPromptCursor" class="underscore-cursor"></span></div>
        </div>
        
        <!-- Loading screen -->
        <div id="loadingScreen" class="loading-screen">
            <div class="crt-overlay"></div>
        </div>

        <!-- Nickname Selection Dialog -->
        <div id="nicknameDialog" class="nickname-dialog">
            <div class="crt-overlay"></div>
            <h2>SELECT YOUR NICKNAME</h2>
            <form class="nickname-form" id="nicknameForm">
                <div class="nickname-field">
                    <label for="nickname">Nickname:</label>
                    <input type="text" id="nickname" maxlength="15" autocomplete="off">
                </div>
                <button type="submit">Connect</button>
            </form>
        </div>

        <!-- IRC Chat Interface -->
        <div id="ircContainer" class="irc-container">
            <div class="crt-overlay"></div>
            <div class="irc-navbar">
                <div class="irc-navbar-item">
                    File
                    <div class="dropdown-menu">
                        <div class="dropdown-item" id="connect-server">Connect to Server</div>
                        <div class="dropdown-item" id="disconnect-server">Disconnect</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="save-log">Save Chat Log</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="exit-chat">Exit</div>
                    </div>
                </div>
                <div class="irc-navbar-item">
                    Edit
                    <div class="dropdown-menu">
                        <div class="dropdown-item" id="copy-selected">Copy</div>
                        <div class="dropdown-item" id="paste-text">Paste</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="clear-chat">Clear Current Window</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="settings">Preferences</div>
                    </div>
                </div>
                <div class="irc-navbar-item">
                    View
                    <div class="dropdown-menu">
                        <div class="dropdown-item" id="toggle-timestamps">Toggle Timestamps</div>
                        <div class="dropdown-item" id="toggle-userlist">Toggle Userlist</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="increase-font">Increase Font Size</div>
                        <div class="dropdown-item" id="decrease-font">Decrease Font Size</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="toggle-sounds">Toggle Sounds</div>
                    </div>
                </div>
                <div class="irc-navbar-item">
                    Channel
                    <div class="dropdown-menu">
                        <div class="dropdown-item" id="join-channel">Join Channel</div>
                        <div class="dropdown-item" id="leave-channel">Leave Current Channel</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="channel-modes">Channel Modes</div>
                        <div class="dropdown-item" id="channel-topic">Change Topic</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="favorite-channels">Favorite Channels</div>
                    </div>
                </div>
                <div class="irc-navbar-item">
                    Help
                    <div class="dropdown-menu">
                        <div class="dropdown-item" id="irc-commands">IRC Commands</div>
                        <div class="dropdown-item" id="about-chat">About KrakerChat</div>
                    </div>
                </div>
            </div>
            <div class="irc-title-bar">
                <div class="irc-title-text">KrakerChat Terminal v0.777</div>
                <div class="irc-title-buttons">
                    <div class="irc-button irc-minimize"></div>
                    <div class="irc-button irc-maximize"></div>
                    <div class="irc-button irc-close"></div>
                </div>
            </div>
            <div class="irc-content">
                <div class="irc-roomlist">
                    <div class="irc-roomlist-header">Channels</div>
                    <ul class="irc-rooms">
                        <li class="irc-room active">#krakerchat</li>
                        <li class="irc-room">Status</li>
                        <li class="irc-room">#design</li>
                    </ul>
                    <div class="irc-add-room">+ Add Channel</div>
                    <div class="irc-user-profile">
                        <div class="user-nick" id="profileNick">Guest</div>
                        <div class="user-status">
                            <div class="status-indicator"></div>
                            <span>Online</span>
                        </div>
                    </div>
                </div>
                <div class="irc-chat">
                    <div id="ircChatWindow" class="irc-chat-window">
                        <!-- Messages will be added here -->
                    </div>
                    <div class="irc-input">
                        <span class="irc-input-prompt">user@minerva:~$ </span>
                        <input type="text" id="ircInputField" placeholder="Type a message and press Enter...">
                        <span class="underscore-cursor"></span>
                    </div>
                </div>
                <div class="irc-userlist">
                    <div class="irc-userlist-header">Online users: 8</div>
                    <ul id="ircUsers" class="irc-users">
                        <li class="irc-user">KrakerAdmin</li>
                        <li class="irc-user">Guest123</li>
                        <li class="irc-user">NewUser42</li>
                        <li class="irc-user">Designer</li>
                        <li class="irc-user">CodeMaster</li>
                        <li class="irc-user away">Pixel_Artist</li>
                        <li class="irc-user">WebWizard</li>
                        <li class="irc-user">CRTlover</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Add Room Dialog -->
        <div id="addRoomDialog" class="add-room-dialog">
            <div class="crt-overlay"></div>
            <h2>ADD NEW ROOM</h2>
            <input type="text" id="roomNameInput" placeholder="Enter new room name (include # prefix for channels)">
            <div class="dialog-divider"></div>
            <div class="buttons">
                <button id="cancelAddRoom">Cancel</button>
                <button id="confirmAddRoom">OK</button>
            </div>
        </div>

        <!-- Main terminal content (hidden initially) -->
        <div id="mainTerminal" class="main-terminal">
            <a href="Chat/TerminalIndex.html" class="back-button">Back</a>
            <div class="crt-overlay"></div>

            <div class="terminal-header">
                <pre>Minerva - 11:22:25 up 0 days,  0:41,  1 user,  load average: 0.47, 0.25, 0.02</pre>
            </div>

            <div class="system-info">
                <pre>Tasks:  20 total,   1 running,  19 sleeping,   0 stopped,   0 zombie</pre>
                <pre>Cpu  :  26.9% us,   0.0% ni,   6.5% sy,  66.7% id</pre>
                <pre>Mem  : 4088.0K total,  2396.8K free,  1691.2K used (41%)</pre>
                <pre>Swap : 2297.5K total,  1457.0K free,   840.5K used (36%)</pre>
            </div>

            <div class="process-table">
                <div class="process-table-header">
                    <span style="width: 50px;">PID</span>
                    <span style="width: 80px;">USER</span>
                    <span style="width: 40px;">PR</span>
                    <span style="width: 30px;">NI</span>
                    <span style="width: 60px;">TEXT</span>
                    <span style="width: 60px;">DATA</span>
                    <span style="width: 60px;">STACK</span>
                    <span style="width: 20px;">S</span>
                    <span style="width: 60px;">TIME</span>
                    <span style="width: 60px;">DTIME</span>
                    <span style="width: 150px;">COMMAND</span>
                </div>
                <pre class="process-row">  3 root     30  0 15.3K 10.0K  4.5K S   2.25   0.00 init</pre>
                <pre class="process-row">  0 root      0  0  0.0K  0.0K  0.0K S   2.15   0.00 [swapper]</pre>
                <pre class="process-row"> 93 root     26  0 25.1K 14.0K  1.4K S   1.55   0.00 inetd</pre>
                <pre class="process-row"> 70 root     26  0 21.3K 15.0K  9.7K S   1.37   0.00 syslogd</pre>
                <pre class="process-row"> 83 root     26  0 35.6K 17.0K  4.6K S   0.52   0.00 cron</pre>
                <pre class="process-row">123 root     26 -10 38.4K 14.0K  4.5K S   0.35   0.00 ntpd</pre>
                <pre class="process-row">101 root     26  0 47.8K 17.0K  2.6K S   0.30   0.00 lpd</pre>
                <pre class="process-row"> 80 root     40  0  1.5K  0.2K  1.4K S   0.28   0.00 update</pre>
                <pre class="process-row">128 root     28  0 15.1K  9.0K  1.3K S   0.25   0.00 getty</pre>
                <pre class="process-row">127 root     28  0 15.1K  9.0K  1.3K S   0.20   0.00 getty</pre>
                <pre class="process-row">117 root     26  0 54.9K 27.0K  4.4K S   0.18   0.00 sendmail</pre>
                <pre class="process-row">129 root     28  0 15.1K  9.0K  1.3K S   0.18   0.00 getty</pre>
                <pre class="process-row">132 root     28  0 15.1K  9.0K  1.3K S   0.18   0.00 getty</pre>
                <pre class="process-row">999 user     40  0 85.3K 42.8K  7.5K R  10.42   0.75 chat</pre>
            </div>

            <div class="chat-messages" id="chatMessages">
                <div class="message message-system">*** Terminal chat session started ***</div>
                <div class="message message-system">*** Welcome to the retro terminal chat ***</div>
            </div>

            <div class="terminal-input" id="terminalInput">
                <div class="input-line">
                    <span class="prompt">user@minerva:~$ </span>
                    <span id="inputContent" class="input-content"></span>
                    <span class="underscore-cursor" id="cursor"></span>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const bootScreen = document.getElementById('bootScreen');
            const menuScreen = document.getElementById('menuScreen');
            const loadingScreen = document.getElementById('loadingScreen');
            const mainTerminal = document.getElementById('mainTerminal');
            const inputContent = document.getElementById('inputContent');
            const chatMessages = document.getElementById('chatMessages');
            const menuItems = document.querySelectorAll('.menu-item');
            
            // Loading screen sequences
            const loadingSequences = {
                login: [
                    "Initializing authentication protocol...",
                    "Connecting to secure server...",
                    "Validating credentials...",
                    "Establishing secure session...",
                    "Loading user profile...",
                    "Redirecting to authentication interface..."
                ],
                register: [
                    "Preparing registration module...",
                    "Initializing secure form generator...",
                    "Allocating database resources...",
                    "Establishing secure channel...",
                    "Redirecting to registration interface..."
                ],
                shop: [
                    "Connecting to marketplace server...",
                    "Loading product database...",
                    "Initializing secure payment protocols...",
                    "Verifying inventory status...",
                    "Establishing merchant connection...",
                    "Redirecting to marketplace interface..."
                ],
                projects: [
                    "Loading project archive...",
                    "Initializing design repository...",
                    "Indexing visual experiments...",
                    "Establishing creative workspace...",
                    "Preparing project resources...",
                    "Redirecting to design archives..."
                ],
                canvas: [
                    "Initializing drawing environment...",
                    "Loading canvas module...",
                    "Preparing graphical interface...",
                    "Calibrating input devices...",
                    "Allocating memory for rendering...",
                    "Launching experimental canvas..."
                ],
                chat: [
                    "Initializing communication protocols...",
                    "Establishing secure channel...",
                    "Loading message history...",
                    "Connecting to chat server...",
                    "Preparing terminal interface...",
                    "Launching secure chat terminal..."
                ]
            };
            
            // Function to simulate loading sequence
            function simulateLoading(action, callback) {
                loadingScreen.style.display = 'block';
                
                // Clear any previous loading content
                loadingScreen.innerHTML = '';
                
                // Add back the overlay
                const overlay = document.createElement('div');
                overlay.className = 'crt-overlay';
                loadingScreen.appendChild(overlay);
                
                // Create a container for the loading lines
                const loadingContainer = document.createElement('div');
                loadingScreen.appendChild(loadingContainer);
                
                // Get the appropriate loading sequence
                const sequence = loadingSequences[action] || loadingSequences.chat;
                let lineIndex = 0;
                
                function printNextLine() {
                    if (lineIndex < sequence.length) {
                        const line = document.createElement('pre');
                        line.className = 'loading-line';
                        line.textContent = sequence[lineIndex];
                        loadingContainer.appendChild(line);
                        loadingScreen.scrollTop = loadingScreen.scrollHeight;
                        lineIndex++;
                        
                        // Varying delays for a realistic effect
                        const delay = Math.random() * 300 + 200;
                        setTimeout(printNextLine, delay);
                    } else {
                        // Loading sequence complete, proceed with callback
                        setTimeout(callback, 500);
                    }
                }
                
                // Start the loading sequence
                printNextLine();
            }
            
            // Function to show the nickname selection dialog
            function showNicknameDialog(callback) {
                // Get references to dialog elements
                const nicknameDialog = document.getElementById('nicknameDialog');
                const nicknameForm = document.getElementById('nicknameForm');
                const nicknameInput = document.getElementById('nickname');
                
                // Generate a default guest nickname
                const defaultNick = "Guest" + Math.floor(Math.random() * 1000);
                
                // Show the dialog and set default nickname
                nicknameDialog.style.display = 'block';
                nicknameInput.value = defaultNick;
                
                // Focus and select the input text
                setTimeout(() => {
                    nicknameInput.focus();
                    nicknameInput.select();
                }, 100);
                
                // Create a one-time event handler for form submission
                const handleSubmission = function(event) {
                    // Prevent default form submission
                    event.preventDefault();
                    
                    // Get the nickname value directly from the input field
                    const nickValue = nicknameInput.value.trim();
                    
                    // Validate nickname
                    if (nickValue.length < 3) {
                        alert('Nickname must be at least 3 characters long');
                        return;
                    }
                    
                    // Remove the event listener to prevent multiple submissions
                    nicknameForm.removeEventListener('submit', handleSubmission);
                    
                    // Hide the dialog
                    nicknameDialog.style.display = 'none';
                    
                    // Set the chosen nickname to global variable
                    currentNick = nickValue;
                    
                    // Execute the callback function
                    callback();
                };
                
                // Clear any existing event listeners by cloning and replacing the form
                const oldForm = nicknameForm;
                const newForm = oldForm.cloneNode(true);
                oldForm.parentNode.replaceChild(newForm, oldForm);
                
                // Add submit event listener to the new form
                document.getElementById('nicknameForm').addEventListener('submit', handleSubmission);
            }
            
            // Boot screen sequences
            const bootSequence = [
                "‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ",
                "‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó",
                "‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù",
                "‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó",
                "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë",
                "‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù",
                "",
                "          welcome to krakerOS V0.777",
                "          --------------------------",
                "",
                "",
                "",
                "",
                "BIOS Version 2.7.4, Copyright (C) 1984-2025",
                "131072K System RAM Passed",
                "24576K Video RAM Passed",
                "System BIOS shadowed",
                "Video BIOS shadowed",
                "SETUP: Fixed Disk 0: WDC AC34300L",
                "Mouse initialized",
                "",
                "Starting Minerva/Unix v5.4...",
                "Probing hardware configuration... OK",
                "CPU: AMD(R) 80486DX2-66 MHz",
                "FPU: Integrated",
                "Memory: 131072K (128M) RAM, 24576K (24M) Video",
                "Storage: WDC 420MB Fixed Disk",
                "Network: Intel EtherExpress PRO/10",
                "",
                "Initializing kernel...",
                "Loading modules: ext2 net snd uart vga... done",
                "Mounting root filesystem... done",
                "Checking filesystems... done",
                "Running fsck on /dev/hda1... clean",
                "Mounting local filesystems... done",
                "Setting up swap space... done",
                "",
                "Starting system logger... done",
                "Starting network services... done",
                "Starting cron daemon... done",
                "Starting mail services... done",
                "Starting time synchronization... done",
                "",
                "Minerva login: user",
                "Password: ********",
                "",
                "Last login: Thu Jun 15 09:42:13 from 192.168.1.42",
                "Welcome to Minerva/Unix v5.4",
                "",
                "Loading KrakerOS interface...",
                "Initializing system protocols..."

            ];

            // Function to simulate boot sequence
            function simulateBoot() {
                let lineIndex = 0;
                const bootContainer = document.createElement('div');
                bootScreen.appendChild(bootContainer);
                
                function printNextLine() {
                    if (lineIndex < bootSequence.length) {
                        const line = document.createElement('pre');
                        line.className = 'boot-line';
                        line.textContent = bootSequence[lineIndex];
                        bootContainer.appendChild(line);
                        bootScreen.scrollTop = bootScreen.scrollHeight;
                        lineIndex++;
                        
                        // Varying delays for more realistic effect but much faster
                        const delay = line.textContent === "" ? 100 : Math.random() * 50 + 10;
                        setTimeout(printNextLine, delay);
                    } else {
                        // Boot sequence complete, show menu after a shorter delay
                        setTimeout(() => {
                            bootScreen.style.display = 'none';
                            menuScreen.style.display = 'block';
                            setupMenu();
                        }, 200);
                    }
                }
                
                // Start the boot sequence
                printNextLine();
            }
            
            // Start the boot sequence
            simulateBoot();
            
            // Menu navigation
            let activeIndex = 0;
            
            function setupMenu() {
                // Set first item as active initially
                menuItems[0].classList.add('active');
                
                // Add click event to menu items
                menuItems.forEach((item, index) => {
                    item.addEventListener('click', () => {
                        selectMenuItem(index);
                    });
                    
                    // Add mouseover to highlight item
                    item.addEventListener('mouseover', () => {
                        // Remove active class from all items
                        menuItems.forEach(i => i.classList.remove('active'));
                        // Add active class to current item
                        item.classList.add('active');
                        activeIndex = index;
                    });
                });
                
                // Add keyboard navigation
                document.addEventListener('keydown', handleMenuKeyDown);
            }
            
            function handleMenuKeyDown(e) {
                switch(e.key) {
                    case 'ArrowUp':
                        // Navigate up
                        menuItems[activeIndex].classList.remove('active');
                        activeIndex = (activeIndex - 1 + menuItems.length) % menuItems.length;
                        menuItems[activeIndex].classList.add('active');
                        menuItems[activeIndex].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                        e.preventDefault();
                        break;
                    
                    case 'ArrowDown':
                        // Navigate down
                        menuItems[activeIndex].classList.remove('active');
                        activeIndex = (activeIndex + 1) % menuItems.length;
                        menuItems[activeIndex].classList.add('active');
                        menuItems[activeIndex].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                        e.preventDefault();
                        break;
                    
                    case 'Enter':
                        // Select current item
                        selectMenuItem(activeIndex);
                        e.preventDefault();
                        break;
                }
            }
            
            function selectMenuItem(index) {
                const action = menuItems[index].getAttribute('data-action');
                
                // Hide menu screen and show loading screen
                menuScreen.style.display = 'none';
                
                // Start loading animation with the action's callback
                simulateLoading(action, function() {
                    // Handle different menu actions after loading
                    switch(action) {
                        case 'chat':
                            // Hide loading screen
                            loadingScreen.style.display = 'none';
                            
                            // Show nickname dialog before showing the IRC chat interface
                            showNicknameDialog(function() {
                                // Show the IRC chat interface
                                ircContainer.style.display = 'block';
                                document.removeEventListener('keydown', handleMenuKeyDown);
                                
                                // Initialize IRC chat
                                initIrcChat();
                                
                                // Focus on input field
                                setTimeout(() => {
                                    ircInputField.focus();
                                }, 100);
                            });
                            break;
                        
                        case 'login':
                            // Redirect to login page
                            window.location.href = 'pages/login.html';
                            break;
                        
                        case 'register':
                            // Redirect to register page
                            window.location.href = 'pages/register.html';
                            break;
                        
                        case 'shop':
                            // Redirect to shop page
                            window.location.href = 'pages/shop.html';
                            break;
                        
                        case 'projects':
                            // Redirect to projects page
                            window.location.href = 'pages/projects.html';
                            break;
                        
                        case 'canvas':
                            // Redirect to canvas page
                            window.location.href = 'canvas.html';
                            break;
                        case 'admin':
                            // Show the admin panel overlay
                            loadingScreen.style.display = 'none';
                            // Trigger admin panel event
                            document.dispatchEvent(new Event('adminCommandEntered'));
                            break;
                    }
                });
            }
            
            // Current input text
            let currentInput = '';
            
            // Handle keyboard input for chat
            function handleKeyDown(e) {
                // Handle special keys
                if (e.key === 'Enter') {
                    processCommand();
                } else if (e.key === 'Backspace') {
                    if (currentInput.length > 0) {
                        currentInput = currentInput.substring(0, currentInput.length - 1);
                        updateInputDisplay();
                    }
                } else if (e.key.length === 1) {
                    // Regular character input
                    currentInput += e.key;
                    updateInputDisplay();
                }
                
                // Prevent default for most keys to avoid browser shortcuts
                if (e.key !== 'F5' && !e.ctrlKey && !e.altKey && !e.metaKey) {
                    e.preventDefault();
                }
            }
            
            // Update the displayed input
            function updateInputDisplay() {
                inputContent.textContent = currentInput;
            }
            
            // Process the entered command
            function processCommand() {
                if (currentInput.trim() !== '') {
                    // Add user message
                    const userMessage = document.createElement('div');
                    userMessage.className = 'message message-user';
                    userMessage.textContent = 'user@minerva:~$ ' + currentInput;
                    chatMessages.appendChild(userMessage);
                    
                    // Check for admin command
                    if (currentInput.trim().toLowerCase() === 'admin') {
                        // Trigger admin panel
                        document.dispatchEvent(new Event('adminCommandEntered'));
                        
                        // Add response
                        setTimeout(() => {
                            const responseMessage = document.createElement('div');
                            responseMessage.className = 'message message-system';
                            responseMessage.textContent = 'system: ADMIN ACCESS MODE ACTIVATED.';
                            chatMessages.appendChild(responseMessage);
                            
                            // Auto scroll to bottom
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }, 500);
                    } else {
                        // Normal response for other commands
                        setTimeout(() => {
                            const responseMessage = document.createElement('div');
                            responseMessage.className = 'message';
                            responseMessage.textContent = 'system: ' + generateResponse(currentInput);
                            chatMessages.appendChild(responseMessage);
                            
                            // Auto scroll to bottom
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }, 500);
                    }
                    
                    // Clear input
                    currentInput = '';
                    updateInputDisplay();
                    
                    // Auto scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            }
            
            // Simple response generator
            function generateResponse(message) {
                const responses = [
                    "Command processed. Awaiting further instructions.",
                    "Interesting input. Please continue.",
                    "I've logged your message in the system records.",
                    "Transmission received. Standing by for next input.",
                    "Message acknowledged. Response protocol activated.",
                    "Information stored in terminal memory banks.",
                    "For administrative access, type 'admin'.",
                    "Try 'admin' for restricted system access.",
                ];
                return responses[Math.floor(Math.random() * responses.length)];
            }

            // IRC chat functionality
            let currentNick = ""; // Will be set from the nickname dialog
            const ircContainer = document.getElementById('ircContainer');
            const ircChatWindow = document.getElementById('ircChatWindow');
            const ircInputField = document.getElementById('ircInputField');
            const ircUsers = document.getElementById('ircUsers');
            const ircTabs = document.querySelectorAll('.irc-tab');
            const ircCloseButton = document.querySelector('.irc-close');

            // Color list for nicks
            const nickColors = [
                '#FF0000', '#00FF00', '#0000FF', '#FF00FF', 
                '#00FFFF', '#FF8000', '#8000FF', '#0080FF',
                '#FF0080', '#008000', '#800000', '#000080'
            ];

            // Add a sound muted state variable
            let soundMuted = false;

            // Function to initialize the IRC chat
            function initIrcChat() {
                // Set the display style directly to make sure it's visible
                ircContainer.style.display = 'block';
                
                // Make sure the navigation bar and UI elements are visible
                document.querySelector('.irc-navbar').style.display = 'flex';
                document.querySelector('.irc-title-bar').style.display = 'flex';
                document.querySelector('.irc-content').style.display = 'flex';
                
                // Update user profile with current nickname
                updateUserProfile();
                
                // Initialize with server message
                addIrcMessage('', '*** Welcome to Kraker-Chat Terminal v0.777 ***', 'system');
                addIrcMessage('', '*** Server: irc.kraker.os Port: 6667 ***', 'system');
                addIrcMessage('', '*** Initializing secure connection... ***', 'system');
                addIrcMessage('', '*** Connection established ***', 'system');
                addIrcMessage('', '*** Your nickname is ' + currentNick + ' ***', 'system');
                
                // Join channel message
                setTimeout(() => {
                    addIrcMessage('', '*** Now talking in #krakerchat ***', 'system');
                    addIrcMessage('', '*** Topic: Welcome to KrakerOS Terminal Chat | Type /help for available commands ***', 'system');
                    addIrcMessage('', '*** ' + currentNick + ' has joined #krakerchat ***', 'system');
                    
                    // Welcome messages from other users
                    setTimeout(() => {
                        addIrcMessage('KrakerAdmin', 'Welcome to KrakerOS Terminal Chat, ' + currentNick + '!');
                        setTimeout(() => {
                            addIrcMessage('Guest123', 'Hey ' + currentNick + ', nice to see a new user here!');
                            setTimeout(() => {
                                addIrcMessage('KrakerAdmin', 'Type /help to see available commands');
                            }, 1500);
                        }, 2000);
                    }, 1000);
                }, 1500);
                
                // Make sure the input field is always present and working
                setupInputField();
                
                // Setup dropdown menu functionality
                setupDropdownMenus();
                
                // Handle tabs clicking
                setupTabsNavigation();
                
                // Handle add room button
                setupAddRoomButton();
                
                // Handle user clicks for private messages
                setupPrivateMessageHandling();
                
                // Handle close button
                setupCloseButton();
                
                // Update input prompt with current nickname
                updateInputPrompt();
                
                // Make sure input field is focused
                setTimeout(() => {
                    ircInputField.focus();
                }, 100);
            }

            // Function to set up the input field
            function setupInputField() {
                const ircInputField = document.getElementById('ircInputField');
                
                // Handle input field
                ircInputField.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' && this.value.trim() !== '') {
                        handleIrcInput(this.value);
                        this.value = '';
                    }
                });
                
                // Handle input field focus
                ircInputField.addEventListener('focus', function() {
                    document.querySelector('.irc-input .underscore-cursor').style.display = 'none';
                });
                
                ircInputField.addEventListener('blur', function() {
                    document.querySelector('.irc-input .underscore-cursor').style.display = 'block';
                });
            }

            // Function to set up dropdown menus
            function setupDropdownMenus() {
                // File menu
                document.getElementById('connect-server').addEventListener('click', function() {
                    addIrcMessage('', '*** Connecting to server... ***', 'system');
                    setTimeout(() => {
                        addIrcMessage('', '*** Connected to irc.kraker.os ***', 'system');
                    }, 1000);
                });
                
                document.getElementById('disconnect-server').addEventListener('click', function() {
                    addIrcMessage('', '*** Disconnecting from server... ***', 'system');
                    setTimeout(() => {
                        addIrcMessage('', '*** Disconnected from irc.kraker.os ***', 'system');
                    }, 500);
                });
                
                document.getElementById('save-log').addEventListener('click', function() {
                    addIrcMessage('', '*** Saving chat log... ***', 'system');
                    setTimeout(() => {
                        addIrcMessage('', '*** Chat log saved to /home/user/krakerchat_log.txt ***', 'system');
                    }, 500);
                });
                
                document.getElementById('exit-chat').addEventListener('click', function() {
                    document.querySelector('.irc-close').click();
                });
                
                // Edit menu
                document.getElementById('copy-selected').addEventListener('click', function() {
                    addIrcMessage('', '*** Selected text copied to clipboard ***', 'system');
                });
                
                document.getElementById('paste-text').addEventListener('click', function() {
                    const ircInputField = document.getElementById('ircInputField');
                    ircInputField.value += '[pasted text] ';
                    ircInputField.focus();
                });
                
                document.getElementById('clear-chat').addEventListener('click', function() {
                    document.getElementById('ircChatWindow').innerHTML = '';
                    addIrcMessage('', '*** Chat window cleared ***', 'system');
                });
                
                document.getElementById('settings').addEventListener('click', function() {
                    addIrcMessage('', '*** Preferences window opened ***', 'system');
                    showPreferencesDialog();
                });
                
                // View menu
                let timestampsVisible = true;
                document.getElementById('toggle-timestamps').addEventListener('click', function() {
                    timestampsVisible = !timestampsVisible;
                    document.querySelectorAll('.irc-timestamp').forEach(ts => {
                        ts.style.display = timestampsVisible ? 'inline' : 'none';
                    });
                    addIrcMessage('', '*** Timestamps ' + (timestampsVisible ? 'shown' : 'hidden') + ' ***', 'system');
                });
                
                let userlistVisible = true;
                document.getElementById('toggle-userlist').addEventListener('click', function() {
                    userlistVisible = !userlistVisible;
                    document.querySelector('.irc-userlist').style.display = userlistVisible ? 'block' : 'none';
                    
                    // Adjust chat width
                    document.querySelector('.irc-chat').style.borderRight = userlistVisible ? '1px solid var(--terminal-amber)' : 'none';
                    
                    addIrcMessage('', '*** Userlist ' + (userlistVisible ? 'shown' : 'hidden') + ' ***', 'system');
                });
                
                // Font size controls
                let currentFontSize = 14;
                document.getElementById('increase-font').addEventListener('click', function() {
                    if (currentFontSize < 24) {
                        currentFontSize += 2;
                        document.querySelector('.irc-container').style.fontSize = currentFontSize + 'px';
                        addIrcMessage('', '*** Font size increased to ' + currentFontSize + 'px ***', 'system');
                    }
                });
                
                document.getElementById('decrease-font').addEventListener('click', function() {
                    if (currentFontSize > 10) {
                        currentFontSize -= 2;
                        document.querySelector('.irc-container').style.fontSize = currentFontSize + 'px';
                        addIrcMessage('', '*** Font size decreased to ' + currentFontSize + 'px ***', 'system');
                    }
                });
                
                // Sound toggle
                let soundEnabled = true;
                document.getElementById('toggle-sounds').addEventListener('click', function() {
                    soundEnabled = !soundEnabled;
                    addIrcMessage('', '*** Sound notifications ' + (soundEnabled ? 'enabled' : 'disabled') + ' ***', 'system');
                });
                
                // Channel menu
                document.getElementById('join-channel').addEventListener('click', function() {
                    const channelName = prompt('Enter channel name to join:');
                    if (channelName && channelName.trim() !== '') {
                        // Create command to join
                        handleIrcInput('/join ' + channelName);
                    }
                });
                
                document.getElementById('leave-channel').addEventListener('click', function() {
                    const activeTab = document.querySelector('.irc-tab.active');
                    if (activeTab && activeTab.textContent.startsWith('#')) {
                        const channelName = activeTab.textContent;
                        addIrcMessage('', '*** Leaving channel ' + channelName + ' ***', 'system');
                        setTimeout(() => {
                            // Remove the tab
                            const tabsContainer = document.querySelector('.irc-tabs');
                            tabsContainer.removeChild(activeTab);
                            
                            // Activate the first remaining tab
                            const firstTab = document.querySelector('.irc-tab');
                            if (firstTab) {
                                firstTab.click();
                            }
                        }, 500);
                    } else {
                        addIrcMessage('', '*** Not in a channel ***', 'system');
                    }
                });
                
                document.getElementById('channel-topic').addEventListener('click', function() {
                    const activeTab = document.querySelector('.irc-tab.active');
                    if (activeTab && activeTab.textContent.startsWith('#')) {
                        const channelName = activeTab.textContent;
                        const newTopic = prompt('Enter new topic for ' + channelName + ':');
                        
                        if (newTopic && newTopic.trim() !== '') {
                            addIrcMessage('', '*** ' + currentNick + ' has changed the topic to: ' + newTopic + ' ***', 'system');
                        }
                    } else {
                        addIrcMessage('', '*** Not in a channel ***', 'system');
                    }
                });
                
                // Help menu
                document.getElementById('irc-commands').addEventListener('click', function() {
                    // Show IRC commands
                    addIrcMessage('', '*** Available IRC Commands: ***', 'system');
                    addIrcMessage('', '*** /nick <nickname> - Change your nickname ***', 'system');
                    addIrcMessage('', '*** /me <action> - Perform an action ***', 'system');
                    addIrcMessage('', '*** /join <channel> - Join a channel ***', 'system');
                    addIrcMessage('', '*** /whisper <user> <message> - Send private message ***', 'system');
                    addIrcMessage('', '*** /whois <user> - Get information about a user ***', 'system');
                    addIrcMessage('', '*** /help - Display this help message ***', 'system');
                    addIrcMessage('', '*** Type admin - Access admin panel ***', 'system');
                });
                
                document.getElementById('about-chat').addEventListener('click', function() {
                    // Show about information
                    addIrcMessage('', '*** KrakerChat Terminal v0.777 ***', 'system');
                    addIrcMessage('', '*** A retro-styled IRC client for KrakerOS ***', 'system');
                    addIrcMessage('', '*** Copyright ¬© 2023-2024 Kraker Industries ***', 'system');
                });
            }

            // Function to set up tabs navigation
            function setupTabsNavigation() {
                const allRooms = document.querySelectorAll('.irc-room');
                allRooms.forEach(room => {
                    room.addEventListener('click', function() {
                        allRooms.forEach(r => r.classList.remove('active'));
                        this.classList.add('active');
                        
                        // Update title bar
                        document.querySelector('.irc-title-text').textContent = 'KrakerChat Terminal v0.777 - ' + this.textContent;
                        
                        if (this.textContent === '#design') {
                            // Show "joining" message when switching to #design
                            ircChatWindow.innerHTML = '';
                            addIrcMessage('', '*** Now talking in #design ***', 'system');
                            addIrcMessage('', '*** Topic: Design discussions, artwork showcase, and creative feedback ***', 'system');
                            addIrcMessage('', '*** ' + currentNick + ' has joined #design ***', 'system');
                            
                            // Update user list for #design
                            updateUserListForChannel('#design');
                        } else if (this.textContent === 'Status') {
                            // Status window
                            ircChatWindow.innerHTML = '';
                            addIrcMessage('', '*** Server status information ***', 'system');
                            addIrcMessage('', '*** Connected to KrakerChat IRC Network (irc.krakerchat.com:6667) ***', 'system');
                            addIrcMessage('', '*** Your host is krakerchat.com, running version KrakerIRCd 3.7.7 ***', 'system');
                            addIrcMessage('', '*** This server was created 2023-04-01 12:00:00 ***', 'system');
                            addIrcMessage('', '*** There are 128 users and 42 invisible on 15 servers ***', 'system');
                            addIrcMessage('', '*** 24 IRC Operators online ***', 'system');
                            addIrcMessage('', '*** 77 channels formed ***', 'system');
                            addIrcMessage('', '*** I have 42 clients and 3 servers ***', 'system');
                            addIrcMessage('', '*** Current local users: 42, Max: 1337 ***', 'system');
                            addIrcMessage('', '*** Current global users: 128, Max: 7331 ***', 'system');
                            
                            // Hide user list for status
                            document.querySelector('.irc-userlist').style.display = 'none';
                        } else {
                            // Default channel (#krakerchat)
                            ircChatWindow.innerHTML = '';
                            addIrcMessage('', '*** Now talking in #krakerchat ***', 'system');
                            addIrcMessage('', '*** Topic: Welcome to KrakerChat, the retro IRC experience! ***', 'system');
                            addIrcMessage('', '*** ' + currentNick + ' has joined #krakerchat ***', 'system');
                            
                            // Show some welcome messages
                            setTimeout(() => {
                                addIrcMessage('KrakerAdmin', 'Welcome to KrakerChat! Enjoy your stay.', 'message');
                                addIrcMessage('Guest123', 'Hello ' + currentNick + '!', 'message');
                            }, 1000);
                            
                            // Show user list and update for #krakerchat
                            document.querySelector('.irc-userlist').style.display = 'block';
                            updateUserListForChannel('#krakerchat');
                        }
                        
                        // Scroll to bottom
                        ircChatWindow.scrollTop = ircChatWindow.scrollHeight;
                    });
                });
                
                // Add click handler for "Add Channel" button
                document.querySelector('.irc-add-room').addEventListener('click', function() {
                    document.getElementById('addRoomDialog').style.display = 'block';
                    document.getElementById('roomNameInput').value = '';
                    setTimeout(() => document.getElementById('roomNameInput').focus(), 100);
                });
            }

            // Add room to the room list
            function addRoomToList(roomName) {
                // Create new room element
                const newRoom = document.createElement('li');
                newRoom.className = 'irc-room';
                newRoom.textContent = roomName;
                
                // Add the new room before the add room button
                const roomsList = document.querySelector('.irc-rooms');
                roomsList.appendChild(newRoom);
                
                // Add click event listener
                newRoom.addEventListener('click', function() {
                    const allRooms = document.querySelectorAll('.irc-room');
                    allRooms.forEach(r => r.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update title
                    document.querySelector('.irc-title-text').textContent = 'KrakerChat Terminal v0.777 - ' + roomName;
                    
                    // Clear chat window and show joining messages
                    ircChatWindow.innerHTML = '';
                    addIrcMessage('', '*** Now talking in ' + roomName + ' ***', 'system');
                    addIrcMessage('', '*** Topic: New room created by ' + currentNick + ' ***', 'system');
                    addIrcMessage('', '*** ' + currentNick + ' has joined ' + roomName + ' ***', 'system');
                    
                    // Show userlist and create a fresh user list for this room
                    document.querySelector('.irc-userlist').style.display = 'block';
                    createFreshUserList();
                    
                    // Ensure input field is focused
                    document.getElementById('ircInputField').focus();
                });
                
                // Activate the new room
                newRoom.click();
            }

            // Function to set up add room button
            function setupAddRoomButton() {
                const addRoomDialog = document.getElementById('addRoomDialog');
                const roomNameInput = document.getElementById('roomNameInput');
                const cancelBtn = document.getElementById('cancelAddRoom');
                const confirmBtn = document.getElementById('confirmAddRoom');
                
                // Handle cancel button
                cancelBtn.addEventListener('click', function() {
                    addRoomDialog.style.display = 'none';
                });
                
                // Handle confirm button
                confirmBtn.addEventListener('click', function() {
                    const roomName = roomNameInput.value.trim();
                    if (roomName !== '') {
                        addRoomDialog.style.display = 'none';
                        addRoomToList(roomName);
                    }
                });
                
                // Also handle Enter key in the input field
                roomNameInput.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        confirmBtn.click();
                    } else if (e.key === 'Escape') {
                        cancelBtn.click();
                    }
                });
            }

            // Function to set up private message handling
            function setupPrivateMessageHandling() {
                document.addEventListener('click', function(e) {
                    if (e.target.closest('.irc-user')) {
                        const user = e.target.closest('.irc-user').textContent;
                        if (user !== currentNick) {
                            // Create or switch to private message tab
                            const tabId = 'pm-' + user.toLowerCase();
                            let tab = document.querySelector('.irc-tab[data-pm="' + user + '"]');
                            
                            if (!tab) {
                                // Create new PM tab
                                tab = document.createElement('div');
                                tab.className = 'irc-tab';
                                tab.textContent = user;
                                tab.setAttribute('data-pm', user);
                                
                                // Insert before the add room button
                                const addRoomBtn = document.querySelector('.irc-add-room');
                                document.querySelector('.irc-tabs').insertBefore(tab, addRoomBtn);
                                
                                // Add event listener
                                tab.addEventListener('click', function() {
                                    const allTabs = document.querySelectorAll('.irc-tab');
                                    allTabs.forEach(t => t.classList.remove('active'));
                                    this.classList.add('active');
                                    
                                    // Update title
                                    document.querySelector('.irc-title-text').textContent = 'KrakerChat Terminal v0.777 - Private chat with ' + user;
                                    
                                    // Clear chat window and show PM start message
                                    ircChatWindow.innerHTML = '';
                                    addIrcMessage('', '*** Private conversation with ' + user + ' ***', 'system');
                                    addIrcMessage('', '*** Messages sent here are only visible to you and ' + user + ' ***', 'system');
                                    
                                    // Update user list to show just this user
                                    ircUsers.innerHTML = '';
                                    const userItem = document.createElement('li');
                                    userItem.className = 'irc-user';
                                    userItem.textContent = user;
                                    ircUsers.appendChild(userItem);
                                    document.querySelector('.irc-userlist-header').textContent = 'Private chat: 1';
                                    
                                    // Ensure input field is focused
                                    setTimeout(() => {
                                        document.getElementById('ircInputField').focus();
                                    }, 100);
                                });
                            }
                            
                            // Switch to this tab
                            tab.click();
                        }
                    }
                });
            }

            // Function to set up close button
            function setupCloseButton() {
                const closeBtn = document.querySelector('.irc-close');
                closeBtn.addEventListener('click', function() {
                    document.getElementById('ircContainer').style.display = 'none';
                    // Return to main menu
                    document.getElementById('menuScreen').style.display = 'block';
                    document.addEventListener('keydown', handleMenuKeyDown);
                });
            }

            // Simple preferences dialog
            function showPreferencesDialog() {
                // Create a mock preferences dialog
                const prefDialog = document.createElement('div');
                prefDialog.style.position = 'absolute';
                prefDialog.style.top = '50%';
                prefDialog.style.left = '50%';
                prefDialog.style.transform = 'translate(-50%, -50%)';
                prefDialog.style.backgroundColor = 'var(--terminal-bg)';
                prefDialog.style.border = '1px solid var(--terminal-amber)';
                prefDialog.style.padding = '15px';
                prefDialog.style.zIndex = '1100';
                prefDialog.style.minWidth = '300px';
                prefDialog.style.boxShadow = '0 0 15px var(--terminal-amber-dim)';
                
                prefDialog.innerHTML = `
                    <h3 style="margin-top: 0; color: var(--terminal-amber);">KrakerChat Preferences</h3>
                    <div style="margin: 10px 0;">
                        <label style="display: block; margin-bottom: 10px;">
                            <input type="checkbox" checked> Play sound on new messages
                        </label>
                        <label style="display: block; margin-bottom: 10px;">
                            <input type="checkbox" checked> Show timestamps
                        </label>
                        <label style="display: block; margin-bottom: 10px;">
                            <input type="checkbox" checked> Use colored nicknames
                        </label>
                    </div>
                    <div style="text-align: right; margin-top: 15px;">
                        <button id="close-prefs" style="background: var(--terminal-bg); border: 1px solid var(--terminal-amber); color: var(--terminal-amber); padding: 5px 10px; cursor: pointer;">Close</button>
                    </div>
                `;
                
                document.body.appendChild(prefDialog);
                
                // Add close button functionality
                document.getElementById('close-prefs').addEventListener('click', function() {
                    document.body.removeChild(prefDialog);
                });
            }

            // Update playMessageSound to use the custom notification sound file
            function playMessageSound() {
                // Check if sound is enabled by the View menu toggle
                if (typeof soundEnabled !== 'undefined' && !soundEnabled) return;
                
                // Create audio element with the custom notification sound
                const audio = new Audio('/audio/notificationSound.mp3');
                
                // Set volume
                audio.volume = 0.4;
                
                // Play the sound
                audio.play().catch(error => {
                    console.error('Error playing notification sound:', error);
                    
                    // Fallback to the Web Audio API if the audio file fails to load
                    const context = new (window.AudioContext || window.webkitAudioContext)();
                    const oscillator1 = context.createOscillator();
                    const oscillator2 = context.createOscillator();
                    const gainNode = context.createGain();
                    
                    oscillator1.type = 'sine';
                    oscillator2.type = 'sine';
                    
                    oscillator1.frequency.value = 880; // A5
                    oscillator2.frequency.value = 988; // B5
                    
                    gainNode.gain.value = 0.15;
                    
                    oscillator1.connect(gainNode);
                    oscillator2.connect(gainNode);
                    gainNode.connect(context.destination);
                    
                    oscillator1.start();
                    
                    setTimeout(() => {
                        oscillator1.stop();
                        oscillator2.start();
                        
                        setTimeout(() => {
                            oscillator2.stop();
                        }, 120);
                    }, 120);
                });
            }

            // Function to add a message to the IRC chat
            function addIrcMessage(nick, text, type = 'normal') {
                const timestamp = new Date().toTimeString().substring(0, 5);
                const message = document.createElement('div');
                message.className = 'irc-message';
                
                const timestampSpan = document.createElement('span');
                timestampSpan.className = 'irc-timestamp';
                timestampSpan.textContent = '[' + timestamp + ']';
                message.appendChild(timestampSpan);
                
                if (type === 'system' || type === 'action' || type === 'whisper') {
                    // System message, action, or whisper
                    const textSpan = document.createElement('span');
                    textSpan.className = type === 'system' ? 'irc-system' : 
                                        type === 'action' ? 'irc-action' : 'irc-whisper';
                    textSpan.textContent = ' ' + text;
                    message.appendChild(textSpan);
                } else {
                    // Normal message with nick
                    const nickSpan = document.createElement('span');
                    nickSpan.className = 'irc-nick';
                    
                    // Assign a color to this nick if it's a user message
                    if (nick) {
                        // Use consistent color for the same nick
                        const nickColorIndex = nick.charCodeAt(0) % nickColors.length;
                        nickSpan.style.color = nickColors[nickColorIndex];
                        nickSpan.textContent = '<' + nick + '>';
                    }
                    
                    message.appendChild(nickSpan);
                    
                    const textSpan = document.createElement('span');
                    textSpan.className = 'irc-text';
                    textSpan.textContent = ' ' + text;
                    
                    // Highlight messages that contain the current nick
                    if (text.includes(currentNick)) {
                        textSpan.classList.add('irc-highlight');
                        // Play sound for mentions
                        playMessageSound();
                    }
                    
                    message.appendChild(textSpan);
                }
                
                ircChatWindow.appendChild(message);
                ircChatWindow.scrollTop = ircChatWindow.scrollHeight;
                
                // Play sound for messages from others (not system or self)
                if (type === 'normal' && nick && nick !== currentNick) {
                    playMessageSound();
                }
            }

            // Function to handle IRC input
            function handleIrcInput(input) {
                if (!input || input.trim() === '') return;
                
                // Check if we're in a private message tab
                const activeTab = document.querySelector('.irc-tab.active');
                const isPM = activeTab && activeTab.hasAttribute('data-pm');
                const pmUser = isPM ? activeTab.getAttribute('data-pm') : null;
                
                // Handle commands with /
                if (input.startsWith('/')) {
                    const parts = input.split(' ');
                    const command = parts[0].toLowerCase();
                    
                    switch (command) {
                        case '/nick':
                            if (parts.length > 1) {
                                const oldNick = currentNick;
                                currentNick = parts[1];
                                addIrcMessage('', '*** ' + oldNick + ' is now known as ' + currentNick + ' ***', 'system');
                                // Update the input prompt with the new nickname
                                updateInputPrompt();
                                
                                // Update the user profile
                                updateUserProfile();
                                
                                // Update the user in the user list
                                updateUserInList(oldNick, currentNick);
                            }
                            break;
                            
                        case '/me':
                            if (parts.length > 1) {
                                const action = input.substring(4);
                                addIrcMessage('', '* ' + currentNick + ' ' + action, 'action');
                            }
                            break;
                            
                        case '/whisper':
                        case '/w':
                        case '/msg':
                            if (parts.length > 2) {
                                const target = parts[1];
                                const message = parts.slice(2).join(' ');
                                
                                // Display in current chat window that you whispered
                                addIrcMessage('', '-> *' + target + '* ' + message, 'whisper');
                                
                                // Switch to or create PM tab
                                const existingTab = document.querySelector('.irc-tab[data-pm="' + target + '"]');
                                if (existingTab) {
                                    // Add message to PM conversation if we're already viewing it
                                    if (isPM && pmUser === target) {
                                        addIrcMessage(currentNick, message);
                                    }
                                } else {
                                    // Simulate a response in a new tab
                                    setTimeout(() => {
                                        const tab = document.createElement('div');
                                        tab.className = 'irc-tab';
                                        tab.textContent = target;
                                        tab.setAttribute('data-pm', target);
                                        
                                        // Insert before the add room button
                                        const addRoomBtn = document.querySelector('.irc-add-room');
                                        document.querySelector('.irc-tabs').insertBefore(tab, addRoomBtn);
                                        
                                        // Add event listener
                                        tab.addEventListener('click', function() {
                                            const allTabs = document.querySelectorAll('.irc-tab');
                                            allTabs.forEach(t => t.classList.remove('active'));
                                            this.classList.add('active');
                                            
                                            // Update title
                                            document.querySelector('.irc-title-text').textContent = 'KrakerChat Terminal v0.777 - Private chat with ' + target;
                                            
                                            // Show PM conversation
                                            ircChatWindow.innerHTML = '';
                                            addIrcMessage('', '*** Private conversation with ' + target + ' ***', 'system');
                                            addIrcMessage('', '*** Messages sent here are only visible to you and ' + target + ' ***', 'system');
                                            addIrcMessage(currentNick, message);
                                            
                                            // Simulate a response
                                            setTimeout(() => {
                                                addIrcMessage(target, 'I got your message! What can I help you with?');
                                            }, 1500);
                                            
                                            // Update user list
                                            ircUsers.innerHTML = '';
                                            const userItem = document.createElement('li');
                                            userItem.className = 'irc-user';
                                            userItem.textContent = target;
                                            ircUsers.appendChild(userItem);
                                            document.querySelector('.irc-userlist-header').textContent = 'Private chat: 1';
                                        });
                                    }, 500);
                                }
                            } else {
                                addIrcMessage('', '*** Usage: /whisper <nickname> <message> ***', 'system');
                            }
                            break;
                            
                        case '/join':
                            if (parts.length > 1) {
                                const channel = parts[1];
                                addIrcMessage('', '*** Joining channel ' + channel + ' ***', 'system');
                                
                                // Add a new tab if it doesn't exist
                                let tabExists = false;
                                const allTabs = document.querySelectorAll('.irc-tab');
                                allTabs.forEach(tab => {
                                    if (tab.textContent === channel) {
                                        tabExists = true;
                                        tab.click(); // Switch to this tab
                                    }
                                });
                                
                                if (!tabExists) {
                                    // Add new tab
                                    const newTab = document.createElement('div');
                                    newTab.className = 'irc-tab';
                                    newTab.textContent = channel;
                                    
                                    // Insert before the add room button
                                    const addRoomBtn = document.querySelector('.irc-add-room');
                                    document.querySelector('.irc-tabs').insertBefore(newTab, addRoomBtn);
                                    
                                    // Add event listener
                                    newTab.addEventListener('click', function() {
                                        const allTabs = document.querySelectorAll('.irc-tab');
                                        allTabs.forEach(t => t.classList.remove('active'));
                                        this.classList.add('active');
                                        document.querySelector('.irc-title-text').textContent = 'KrakerChat Terminal v0.777 - ' + channel;
                                        
                                        // Show joining message
                                        ircChatWindow.innerHTML = '';
                                        addIrcMessage('', '*** Now talking in ' + channel + ' ***', 'system');
                                        addIrcMessage('', '*** ' + currentNick + ' has joined ' + channel + ' ***', 'system');
                                        
                                        // Create users for this new channel
                                        createFreshUserList();
                                    });
                                    
                                    // Simulate click
                                    newTab.click();
                                }
                            }
                            break;
                            
                        case '/whois':
                            if (parts.length > 1) {
                                const user = parts[1];
                                addIrcMessage('', '*** WHOIS information for ' + user + ' ***', 'system');
                                addIrcMessage('', '*** ' + user + ' is ' + getRandomUserInfo(user), 'system');
                                addIrcMessage('', '*** ' + user + ' has been online for ' + Math.floor(Math.random() * 120) + ' minutes', 'system');
                                addIrcMessage('', '*** End of WHOIS information ***', 'system');
                            }
                            break;
                            
                        case '/help':
                            addIrcMessage('', '*** Available commands: ***', 'system');
                            addIrcMessage('', '*** /nick <nickname> - Change your nickname ***', 'system');
                            addIrcMessage('', '*** /me <action> - Perform an action ***', 'system');
                            addIrcMessage('', '*** /join <channel> - Join a channel ***', 'system');
                            addIrcMessage('', '*** /whisper <user> <message> - Send private message ***', 'system');
                            addIrcMessage('', '*** /whois <user> - Get information about a user ***', 'system');
                            addIrcMessage('', '*** /help - Display this help message ***', 'system');
                            addIrcMessage('', '*** Type admin - Access admin panel ***', 'system');
                            break;
                            
                        default:
                            addIrcMessage('', '*** Unknown command: ' + command + ' ***', 'system');
                            break;
                    }
                } else {
                    if (isPM) {
                        // In a private message tab
                        addIrcMessage(currentNick, input);
                        
                        // Simulate response
                        setTimeout(() => {
                            addIrcMessage(pmUser, generateRandomResponse());
                        }, 1000 + Math.random() * 2000);
                    } else {
                        // Regular message in a channel
                        addIrcMessage(currentNick, input);
                        
                        // Simulate response after a delay
                        if (Math.random() > 0.5) {
                            setTimeout(() => {
                                // Random user responds
                                const users = Array.from(document.querySelectorAll('.irc-user'))
                                    .map(user => user.textContent)
                                    .filter(name => name !== currentNick);
                                
                                if (users.length > 0) {
                                    const randomUser = users[Math.floor(Math.random() * users.length)];
                                    addIrcMessage(randomUser, generateRandomResponse());
                                }
                            }, 1000 + Math.random() * 2000);
                        }
                    }
                }
            }

            // Function to create a fresh user list
            function createFreshUserList() {
                ircUsers.innerHTML = '';
                const randomUsers = [
                    'User' + Math.floor(Math.random() * 1000),
                    'Guest' + Math.floor(Math.random() * 1000),
                    'Visitor' + Math.floor(Math.random() * 1000)
                ];
                
                // Add current user and random users
                const users = [
                    {name: currentNick, status: 'online'},
                    {name: randomUsers[0], status: 'online'},
                    {name: randomUsers[1], status: 'away'},
                    {name: randomUsers[2], status: 'online'}
                ];
                
                // Add users to the list
                users.forEach(user => {
                    const userItem = document.createElement('li');
                    userItem.className = 'irc-user';
                    if (user.status === 'away') userItem.classList.add('away');
                    userItem.textContent = user.name;
                    ircUsers.appendChild(userItem);
                });
                
                // Update user count
                document.querySelector('.irc-userlist-header').textContent = 'Online users: ' + users.length;
            }

            // Update input field prompt to show current nickname
            function updateInputPrompt() {
                const prompt = document.querySelector('.irc-input-prompt');
                if (prompt) {
                    prompt.textContent = currentNick + '> ';
                }
            }

            // Function to update user in the user list
            function updateUserInList(oldNick, newNick) {
                const userList = document.getElementById('ircUsers');
                const users = Array.from(userList.children);
                const updatedUsers = users.map(li => {
                    if (li.textContent === oldNick) {
                        const newLi = document.createElement('li');
                        newLi.className = li.className;
                        newLi.textContent = newNick;
                        return newLi;
                    }
                    return li;
                });
                userList.innerHTML = '';
                updatedUsers.forEach(li => userList.appendChild(li));
            }

            // Function to update user list for different channels
            function updateUserListForChannel(channel) {
                // Clear current user list
                ircUsers.innerHTML = '';
                
                // Different users for different channels
                let users = [];
                
                if (channel === '#krakerchat') {
                    users = [
                        { name: 'KrakerAdmin', status: 'online' },
                        { name: 'Guest123', status: 'online' },
                        { name: 'NewUser42', status: 'online' },
                        { name: 'Designer', status: 'online' },
                        { name: 'CodeMaster', status: 'online' },
                        { name: 'Pixel_Artist', status: 'away' },
                        { name: 'WebWizard', status: 'online' },
                        { name: 'CRTlover', status: 'online' }
                    ];
                    
                    // Add current user if not already in the list
                    if (!users.some(u => u.name === currentNick)) {
                        users.push({ name: currentNick, status: 'online' });
                    }
                } else if (channel === '#design') {
                    users = [
                        { name: 'Designer', status: 'online' },
                        { name: 'Pixel_Artist', status: 'online' },
                        { name: 'ArtGuru', status: 'online' },
                        { name: 'UX_Master', status: 'away' },
                        { name: 'CSS_Wizard', status: 'online' },
                        { name: 'Illustrator', status: 'online' }
                    ];
                    
                    // Add current user if not already in the list
                    if (!users.some(u => u.name === currentNick)) {
                        users.push({ name: currentNick, status: 'online' });
                    }
                }
                
                // Sort alphabetically
                users.sort((a, b) => a.name.localeCompare(b.name));
                
                // Add users to the list
                users.forEach(user => {
                    const userItem = document.createElement('li');
                    userItem.className = 'irc-user';
                    if (user.status === 'away') userItem.classList.add('away');
                    userItem.textContent = user.name;
                    ircUsers.appendChild(userItem);
                });
                
                // Update user count
                document.querySelector('.irc-userlist-header').textContent = 'Online users: ' + users.length;
            }

            // Helper function to generate random user info
            function getRandomUserInfo(user) {
                const ips = ['192.168.1.' + Math.floor(Math.random() * 255), 
                            '10.0.0.' + Math.floor(Math.random() * 255)];
                const locations = ['New York', 'Los Angeles', 'Tokyo', 'London', 'Berlin', 'Sydney'];
                const clients = ['mIRC v7.69', 'HexChat 2.16.0', 'KrakerChat 1.0', 'weechat 3.4'];
                
                return user + '@' + ips[Math.floor(Math.random() * ips.length)] + 
                        ' * ' + locations[Math.floor(Math.random() * locations.length)] + 
                        ' using ' + clients[Math.floor(Math.random() * clients.length)];
            }

            // Generate a random response
            function generateRandomResponse() {
                const responses = [
                    "Interesting point!",
                    "I agree with that.",
                    "Not sure I follow, can you elaborate?",
                    "That's a good idea!",
                    "Has anyone else experienced this?",
                    "Let me think about that for a bit.",
                    "That reminds me of a project I worked on last year.",
                    "Nice to hear from you!",
                    "I was just thinking about that.",
                    "What else have you been working on?"
                ];
                return responses[Math.floor(Math.random() * responses.length)];
            }

            // Function to update the user's profile information
            function updateUserProfile() {
                // Update the profile nickname
                const profileNick = document.getElementById('profileNick');
                if (profileNick) {
                    profileNick.textContent = currentNick;
                }
            }
        });
    </script>
    
    <!-- Admin Panel Overlay -->
    <div id="admin-overlay" class="admin-overlay">
        <div class="matrix-container" id="matrix-container"></div>
        <div class="admin-access-panel">
            <h2>ACCESS POINT</h2>
            <form id="admin-login-form" class="admin-login-form">
                <div class="admin-field">
                    <label for="admin-id">ID:</label>
                    <input type="text" id="admin-id" maxlength="20" autocomplete="off">
                </div>
                <div class="admin-field">
                    <label for="admin-password">PASSWORD:</label>
                    <input type="password" id="admin-password" autocomplete="off">
                </div>
                <button type="submit">ACCESS</button>
            </form>
            <div id="admin-message" class="admin-message"></div>
        </div>
        <div class="admin-crt-effect"></div>
    </div>
    
    <script>
        // Admin Panel & Matrix Animation
        document.addEventListener('DOMContentLoaded', function() {
            // Add admin functionality to the terminal
            const adminCommand = 'admin';
            const adminOverlay = document.getElementById('admin-overlay');
            const adminLoginForm = document.getElementById('admin-login-form');
            const adminMessage = document.getElementById('admin-message');
            const matrixContainer = document.getElementById('matrix-container');
            
            // Listen for admin command
            document.addEventListener('adminCommandEntered', function() {
                adminOverlay.style.display = 'flex';
                startMatrixAnimation();
            });
            
            // Matrix animation characters
            const matrixChars = [
                // Latin alphabet (uppercase & lowercase)
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                // Numbers
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                // Special characters
                '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}', '[', ']', '|', '\\', ':', ';', '"', '\'', '<', '>', ',', '.', '?', '/',
                // Chinese characters
                'Âåó', '‰∫¨', '‰∏ú', 'Êñπ', '‰∏≠', 'ÂõΩ', '‰∫∫', 'Ê∞ë', 'ÂÖ±', 'Âíå', 'ÂõΩ', '‰∏ñ', 'Áïå', 'ÊÇ®', 'Â•Ω', 'Â§ß', 'Â∞è', '‰∏ä', '‰∏ã', 'Â∑¶', 'Âè≥',
                // Japanese characters
                '„Ç¢', '„Ç§', '„Ç¶', '„Ç®', '„Ç™', '„Ç´', '„Ç≠', '„ÇØ', '„Ç±', '„Ç≥', '„Çµ', '„Ç∑', '„Çπ', '„Çª', '„ÇΩ', '„Çø', '„ÉÅ', '„ÉÑ', '„ÉÜ', '„Éà',
                '„Éè', '„Éí', '„Éï', '„Éò', '„Éõ', '„Éû', '„Éü', '„É†', '„É°', '„É¢', '„É§', '„É¶', '„É®', '„É©', '„É™', '„É´', '„É¨', '„É≠', '„ÉØ', '„É≤', '„É≥',
                'Êó•', 'Êú¨', 'Ë™û', 'Êº¢', 'Â≠ó',
                // Hebrew characters
                '◊ê', '◊ë', '◊í', '◊ì', '◊î', '◊ï', '◊ñ', '◊ó', '◊ò', '◊ô', '◊õ', '◊ú', '◊û', '◊†', '◊°', '◊¢', '◊§', '◊¶', '◊ß', '◊®', '◊©', '◊™',
                // Arabic characters
                'ÿß', 'ÿ®', 'ÿ™', 'ÿ´', 'ÿ¨', 'ÿ≠', 'ÿÆ', 'ÿØ', 'ÿ∞', 'ÿ±', 'ÿ≤', 'ÿ≥', 'ÿ¥', 'ÿµ', 'ÿ∂', 'ÿ∑', 'ÿ∏', 'ÿπ', 'ÿ∫', 'ŸÅ', 'ŸÇ', 'ŸÉ', 'ŸÑ', 'ŸÖ', 'ŸÜ', 'Ÿá', 'Ÿà', 'Ÿä',
                // Greek characters
                'Œë', 'Œí', 'Œì', 'Œî', 'Œï', 'Œñ', 'Œó', 'Œò', 'Œô', 'Œö', 'Œõ', 'Œú', 'Œù', 'Œû', 'Œü', 'Œ†', 'Œ°', 'Œ£', 'Œ§', 'Œ•', 'Œ¶', 'Œß', 'Œ®', 'Œ©',
                'Œ±', 'Œ≤', 'Œ≥', 'Œ¥', 'Œµ', 'Œ∂', 'Œ∑', 'Œ∏', 'Œπ', 'Œ∫', 'Œª', 'Œº', 'ŒΩ', 'Œæ', 'Œø', 'œÄ', 'œÅ', 'œÉ', 'œÑ', 'œÖ', 'œÜ', 'œá', 'œà', 'œâ',
                // Cyrillic characters
                '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–≠', '–Æ', '–Ø',
                // Mathematical symbols
                '‚àÄ', '‚àÇ', '‚àÉ', '‚àÖ', '‚àá', '‚àà', '‚àâ', '‚àã', '‚àè', '‚àë', '‚àû', '‚à†', '‚àß', '‚à®', '‚à©', '‚à™', '‚à´', '‚à¥', '‚àº', '‚âÖ', '‚âà', '‚â†', '‚â°', '‚â§', '‚â•', '‚äÇ', '‚äÉ', '‚äÜ', '‚äá', '‚äï', '‚äó', '‚ä•'
            ];
            
            let matrixStreams = [];
            let activeAnimation = null;
            
            // Close admin panel when clicking outside the access panel
            adminOverlay.addEventListener('click', function(e) {
                if (e.target === adminOverlay) {
                    adminOverlay.style.display = 'none';
                    stopMatrixAnimation();
                }
            });
            
            // Process login submission
            adminLoginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const id = document.getElementById('admin-id').value;
                const password = document.getElementById('admin-password').value;
                
                // Simple validation for demonstration
                if (id === 'admin' && password === 'admin123') {
                    // Success logic would go here
                    adminMessage.textContent = 'Access granted!';
                    adminMessage.style.color = '#00ff00';
                } else {
                    // Failed login
                    adminMessage.textContent = 'Don\'t be fool :)';
                    adminMessage.style.color = '#ffa500';
                    
                    // Reset form
                    setTimeout(() => {
                        adminLoginForm.reset();
                        document.getElementById('admin-id').focus();
                    }, 1500);
                }
            });
            
            // Matrix animation functions
            function startMatrixAnimation() {
                const width = window.innerWidth;
                const height = window.innerHeight;
                
                // Clear previous animation
                stopMatrixAnimation();
                matrixContainer.innerHTML = '';
                matrixStreams = [];
                
                // Create matrix streams - EXTREMELY crowded now
                const numStreams = Math.floor(width / 5); // One stream every 5px (ultra crowded)
                
                for (let i = 0; i < numStreams; i++) {
                    createMatrixStream(width, height);
                }
                
                // Start animation loop
                activeAnimation = requestAnimationFrame(animateMatrix);
            }
            
            function createMatrixStream(width, height) {
                const stream = {
                    x: Math.random() * width,
                    y: Math.random() * -100,
                    speed: 2 + Math.random() * 8, // Much faster (was 1-6)
                    chars: [],
                    length: 25 + Math.floor(Math.random() * 50) // Much longer streams (was 15-45)
                };
                
                matrixStreams.push(stream);
            }
            
            function createMatrixChar(x, y, char, opacity = 1) {
                const element = document.createElement('div');
                element.className = 'matrix-char';
                element.textContent = char;
                element.style.left = `${x}px`;
                element.style.top = `${y}px`;
                element.style.opacity = opacity;
                matrixContainer.appendChild(element);
                return element;
            }
            
            function animateMatrix() {
                const height = window.innerHeight;
                
                matrixStreams.forEach(stream => {
                    // Move stream down
                    stream.y += stream.speed;
                    
                    // Add new character to stream - much higher probability (0.3 instead of 0.6)
                    if (Math.random() > 0.3) {
                        const char = matrixChars[Math.floor(Math.random() * matrixChars.length)];
                        const element = createMatrixChar(stream.x, stream.y, char);
                        
                        stream.chars.push({
                            element: element,
                            y: stream.y
                        });
                    }
                    
                    // Update and remove old characters
                    for (let i = stream.chars.length - 1; i >= 0; i--) {
                        const charObj = stream.chars[i];
                        const distance = stream.y - charObj.y;
                        
                        if (distance > stream.length) {
                            charObj.element.remove();
                            stream.chars.splice(i, 1);
                        } else {
                            charObj.element.style.opacity = 1 - (distance / stream.length);
                        }
                    }
                    
                    // Reset stream if it's fully off screen
                    if (stream.y - stream.length > height) {
                        stream.y = Math.random() * -100;
                        stream.chars.forEach(charObj => charObj.element.remove());
                        stream.chars = [];
                    }
                });
                
                // Occasionally add random floating characters
                if (Math.random() > 0.85) {
                    const width = window.innerWidth;
                    const height = window.innerHeight;
                    const x = Math.random() * width;
                    const y = Math.random() * height;
                    const char = matrixChars[Math.floor(Math.random() * matrixChars.length)];
                    const element = createMatrixChar(x, y, char, 0.5);
                    
                    // Fade out after a short time
                    setTimeout(() => {
                        element.style.opacity = '0';
                        element.style.transition = 'opacity 0.5s';
                        setTimeout(() => element.remove(), 500);
                    }, 500);
                }
                
                // Continue animation
                if (activeAnimation) {
                    activeAnimation = requestAnimationFrame(animateMatrix);
                }
            }
            
            // Remove word drops function (not used anymore)
            
            function stopMatrixAnimation() {
                if (activeAnimation) {
                    cancelAnimationFrame(activeAnimation);
                    activeAnimation = null;
                }
                
                // Remove all matrix characters
                while (matrixContainer.firstChild) {
                    matrixContainer.removeChild(matrixContainer.firstChild);
                }
            }
            
            // Handle window resize
            window.addEventListener('resize', function() {
                if (adminOverlay.style.display === 'flex') {
                    startMatrixAnimation();
                }
            });
        });
    </script>
</body>
</html> 